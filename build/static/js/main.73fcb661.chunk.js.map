{"version":3,"sources":["MyAnalyticsDashBoard.js","App.js","index.js"],"names":["MyAnalyticsDashBoard","this","interval","setInterval","setState","time","Date","now","clearInterval","style","color","authOptions","clientId","renderCharts","gapi","viewId","chartStyles","maxWidth","showPageViews","showUsers","days","activeUserDays","query","ids","metrics","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"iTAgEeA,E,uKAvDb,WAAqB,IAAD,OAElBC,KAAKC,SAAWC,aAAa,WAC3B,OAAO,EAAKC,SAAS,CAAEC,KAAMC,KAAKC,UACjC,O,kCAEL,WACEC,cAAcP,KAAKC,Y,oBAErB,WACA,OACE,yBAAKO,MAAO,CAAEC,MAAM,UACpB,kBAAC,qBAAD,CACEC,YAAa,CACXC,SACE,4EAEJC,aAAc,SAACC,EAAMC,GACnB,IAAMC,EAAc,CAClBC,SAAU,KAEZ,OACE,6BACE,kBAAC,sBAAD,CACEH,KAAMA,EACNC,OAAQA,EACRG,eAAa,EACbC,WAAS,EACTV,MAAOO,IAET,kBAAC,mBAAD,CACJF,KAAMA,EACNC,OAAQA,EACRK,KAAM,EACNC,eAAgB,EAChBZ,MAAOO,IAET,kBAAC,sBAAD,CAAqBF,KAAMA,EAAMC,OAAQA,EAAQK,KAAM,GAAKX,MAAOO,EACnEM,MAAO,CACLC,IAAKR,EACL,aAAc,YACd,WAAY,QACZS,QAAS,uB,GA3CkBC,IAAMC,WCI1BC,MARf,WACE,OACE,kBAAC,WAAD,KACA,kBAAC,EAAD,QCDJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.73fcb661.chunk.js","sourcesContent":["import React from \"react\";\nimport { AnalyticsDashboard } from \"react-analytics-charts\";\nimport {\n  SessionsByDateChart,\n  ActiveUsersChart,\n  SessionsByHourChart\n} from \"react-analytics-charts\";\n\nclass MyAnalyticsDashBoard extends React.Component {\n  componentDidMount() {\n    \n    this.interval = setInterval( () => {\n      return this.setState({ time: Date.now() })\n    }, 1000*60);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render(){\n  return (\n    <div style={{ color:\"white\" }}>\n    <AnalyticsDashboard\n      authOptions={{\n        clientId:\n          \"647763592563-041vtakasol9jju6o7c0igso756ead2e.apps.googleusercontent.com\",\n      }}\n      renderCharts={(gapi, viewId) => {\n        const chartStyles = {\n          maxWidth: 600,\n        };\n        return (\n          <div>\n            <SessionsByDateChart\n              gapi={gapi}\n              viewId={viewId}\n              showPageViews\n              showUsers\n              style={chartStyles}\n            />\n            <ActiveUsersChart\n        gapi={gapi}\n        viewId={viewId}\n        days={7}\n        activeUserDays={1}\n        style={chartStyles}\n      />\n      <SessionsByHourChart gapi={gapi} viewId={viewId} days={28}  style={chartStyles} \n      query={{\n        ids: viewId,\n        \"start-date\": \"20daysAgo\",\n        \"end-date\": \"today\",\n        metrics: \"ga:users\",\n       \n      }}\n      />\n          </div>\n        );\n      }}\n    />\n    </div>\n  );\n    }\n}\n\nexport default MyAnalyticsDashBoard;\n","import React, { Fragment } from \"react\";\n\nimport MyAnalyticsDashBoard from \"./MyAnalyticsDashBoard\";\n\nfunction App() {\n  return (\n    <Fragment>\n    <MyAnalyticsDashBoard/>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}